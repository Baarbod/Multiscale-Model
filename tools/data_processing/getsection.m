function getsection(matfile,xRange,yRange,zRange)
% GETSECTION Extracts a specific section from a kleinfeld network.
%
% Input:
%   matfile - Matfile generated by 'getfull' or 'getfullreduced' functions.
%   segperstrand - Desired number of segments per strand.
%
% Output:
%   matfile - Data structure 'o' with network information as fields.
%
% Example of usage:  
%   getsection('au_full',[0 200],[400 500],[100 1000])
%   getsection('av_reduced_nps_3',[0 200],[400 500],[100 1000]) 
%
% Example of output:
%  first example shown above yields 'au_sect_200_100_900' matfile 
%
%% Load data
dat = load(matfile);
Adj = dat.o.Adj;
xyz = dat.o.xyz;
d = dat.o.d;
name = dat.o.name;
inflowInd = dat.o.inflowInd;
outflowInd = dat.o.outflowInd;
artFullNodePath = dat.o.artFullNodePath;
venFullNodePath = dat.o.venFullNodePath;

artFullNodePathCoord = xyz(artFullNodePath,:);
venFullNodePathCoord = xyz(venFullNodePath,:);
inflowIndCoord = xyz(inflowInd,:);
outflowIndCoord = xyz(outflowInd,:);

starttime = tic;

%% Remove nodes outside of domain
G = graph(Adj);
G.Edges.Weight = d;

xyz(xyz(:,1) <= xRange(1)) = 0;
xyz(xyz(:,1) >= xRange(2)) = 0;

xyz(xyz(:,2) <= yRange(1)) = 0;
xyz(xyz(:,2) >= yRange(2)) = 0;

xyz(xyz(:,3) <= zRange(1)) = 0;
xyz(xyz(:,3) >= zRange(2)) = 0;

zeroRow = find(any(xyz==0,2));
xyz(zeroRow,:) = [];
G = rmnode(G,zeroRow);
Adj = adjacency(G);

a = largestcomponent(Adj);
G = subgraph(G,a);
Adj = adjacency(G);
xyz = xyz(a,:);

%% Get boundary nodes
[~,inflowInd,~] = intersect(xyz,inflowIndCoord,'rows');
[~,outflowInd,~] = intersect(xyz,outflowIndCoord,'rows');
[~,artFullNodePath,~] = intersect(xyz,artFullNodePathCoord,'rows');
[~,venFullNodePath,~] = intersect(xyz,venFullNodePathCoord,'rows');

%% Get diameters
d = G.Edges.Weight;

%% Compute lengths
f = waitbar(0,'Calculating segment lengths...');

nseg = numedges(G);
lseg = zeros(nseg,1);
for iseg = 1:nseg
    [nod1, nod2] = findedge(G,iseg);
    lseg(iseg) = norm(xyz(nod2,:)-xyz(nod1,:));
    if lseg(iseg) == 0
        error('Length of segment %i is zero',iseg)
    end
    waitbar(iseg/nseg,f)
end
close(f)

%% Node connectivity
f = waitbar(0,'Setting up node connectivity...');

nnod = numnodes(G);
nodnod = zeros(nnod,3); % nodes connected to nodes
for inod = 1:nnod
    nodind = find(Adj(:,inod) ~= 0);
    for jnod = 1:length(nodind)
        nod = nodind(jnod);
        nodnod(inod,jnod) = nod;
    end
    waitbar(inod/nnod,f);
end
close(f)

%% Time
endtime = toc(starttime);
fprintf('Elapsed time: %f seconds\n',endtime);

%% Plot
figure
h = plot(G,'XData',xyz(:,1),'YData',xyz(:,2),'ZData',xyz(:,3),...
    'LineWidth',0.5,'EdgeAlpha',0.2,'MarkerSize',0.001);
highlight(h,artFullNodePath,'MarkerSize',3,'Marker','s','NodeColor','g')
highlight(h,venFullNodePath,'MarkerSize',3,'Marker','o','NodeColor','r')
ax = gca;
ax.FontWeight = 'bold';
ax.FontName = 'Times New Roman';
ax.Title.String = 'Arteriole nodes: green || Venule nodes: red';
ax.Title.FontSize = 14;
ax.AmbientLightColor = 'magenta';
ax.XGrid = 'off';
ax.YGrid = 'off';
ax.ZGrid = 'off';
ax.XAxis.Label.String = 'x (\mum)';
ax.YAxis.Label.String = 'y (\mum)';
ax.ZAxis.Label.String = 'z (\mum)';
axis equal

%% Store 
o.xyz = xyz;
o.Adj = Adj;
o.d = d;
o.lseg = lseg;
o.name = name;
o.edgenod = G.Edges{:,1};
o.nodnod = nodnod;
o.inflowInd = inflowInd;
o.outflowInd = outflowInd;
o.artFullNodePath = artFullNodePath;
o.venFullNodePath = venFullNodePath;

%% Save
xDim = abs(xRange(1) - xRange(2));
yDim = abs(yRange(1) - yRange(2));
zDim = abs(zRange(1) - zRange(2));
path = uigetdir(pwd,'Select path for  output');
figname = sprintf([name '_sect_' num2str(xDim) '_' num2str(yDim) '_' num2str(zDim)]);
matname = sprintf([name '_sect_' num2str(xDim) '_' num2str(yDim) '_' num2str(zDim)]);
saveas(gcf,[path '\' figname])
save([path '\' matname],'o')

%#ok<*AGROW>
%#ok<*STRNU>